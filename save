let colorScaleChart = d3.scaleLinear().domain([1, d3.max(dataToDisplay,  d => { return d.value; })]).range(['orange', 'red']);

    let barColor = d3.interpolateInferno(0.1);
    let highlightColor = d3.interpolateInferno(0.3);

    let gHisto = svgTarget.append("g")
        .attr("transform", "translate(" + (2.5 * margin.left) + "," + ( 3 * margin.top) + ")");

    let y = d3.scaleBand()
        .range([0, height * 0.7])
        .padding(0.4);

    let x = d3.scaleLinear()
        .range([0,width * 0.6])
        .nice()
        .interpolate(d3.interpolateRound);

    let xAxis = d3.axisBottom(y).tickSize([]).tickPadding(10);
    let yAxis = d3.axisLeft(x).tickSize(1);

    y.domain(dataToDisplay.map( d => { return d.Target; }));
    x.domain([0, d3.max(dataToDisplay,  d => { return d.value; })]);
    //y.domain(dataToDisplay.map( d => { return d.value; }));

    gHisto.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height * 0.6 + ")")
        .call(xAxis);
    gHisto.append("g")
        .attr("class","y axis")
        .call(yAxis);

    gHisto.selectAll(".bar")
        .data(dataToDisplay)
        .enter().append("rect")
        .attr("class", "bar")
        .style("display", d => { return d.value === null ? "none" : null; })
        .style("fill",  d => {
            return colorScaleChart(d.value);
        })
        .attr("y",  d => { return y(d.Target); })
        .attr("width", y.bandwidth())
        .attr("x",  d => { return height * 0.6; })
        .attr("height", 0)
        .attr("x",  d => { return x(d.value); })
        .attr("height",  d => { return 0.6 * height - x(d.value); });

    // Labels
    gHisto.selectAll(".label")
        .data(dataToDisplay)
        .enter()
        .append("text")
        .attr("class", "label")
        .style("display",  d => { return d.value === null ? "none" : null; })
        .style('opacity', 0.9)
        .attr("x", ( d => { return y(d.Target) + (y.bandwidth() / 2) -8 ; }))
        .attr("y",  d => { return height * 0.7; })
        .attr("height", 0)
        .text( d => { return d.value; })
        .attr("y",  d => { return x(d.value) + .1; })
        .attr("dy", "-.7em");

    // Legend plot
    svgTarget.append('g').append("text")
        .attr("transform", "translate(" + (margin.left) + "," + (height * 0.7 + margin.bottom * 2) + ")")
        .attr('y', function (d) {
            return 0;
        })
        .style('font-style', 'italic')
        .text(function (d) {
            if (stateId === 0) {
                return "Fig. 6 : Number of mass shootings per Target in the US";
            }

            if (stateId < 10) {
                return "Fig. 6 : Number of mass shootings per Target in " + getKeyByValue(fips, "0" + stateId);
            }
            return "Fig. 6 : Number of mass shootings per Target in " + getKeyByValue(fips, "" + stateId);

        }).attr('x', function () {
        return 0;
    });